#!/usr/bin/env sh
# vim: set noet ts=2 sw=2 ft=sh sts=2 ai:
#
# Aids you creating Dockerfile by adding their history
# as RUN instructions.
#
# Author: Augusto Pascutti <augusto.hp+oss@gmail.com>
#
# TODO: Git ignores the `OPTION_CHOME` directory
# TODO: Test history writting for different shells

PROGRAM_NAME=$(basename "$0")
PROGRAM_VERSION=${PROGRAM_VERSION:-"1.0.0"}
PROGRAM_URL="https://github.com/augustohp/ship"

OPTION_CHOME=".ship"
OPTION_IMAGE=""
OPTION_DOCKERFILE="Dockerfile"
OPTION_FORCE_RECREATION=""
OPTION_SHELL_TEST="bash ash"

ENTRYPOINT="main"
GIT=$(command -v git)
DOCKER=$(command -v docker)

if [ -n "$DEBUG" ] 
then
	set -x
fi

trap cleanup 0 1 2 3 6
cleanup()
{
	rm -rf "${OPTION_CHOME}"
}

# Usage: display_version
display_version()
{
	echo "$PROGRAM_NAME $PROGRAM_VERSION"
}

# Usage: display_help
display_help()
{
	cat <<-EOT
	Usage: $PROGRAM_NAME [-o <filename>] [-f] <image>
	       $PROGRAM_NAME <-d | --detect-shell> <image>
	       $PROGRAM_NAME <-h | --help>
	       $PROGRAM_NAME <-v | --version>

	Eases the creation of a Dockerfile by transforming the history
	into RUN instructions.

	Arguments:
	  image                    The name of Dockerimage to be executed. 
	                           The image must have bash installed.
	Options:
	  -o | --out <filename>    The name of the Dockerfile to be creared.
	                           Default: ${OPTION_DOCKERFILE}.
	  -f | --force             Re-creates ${OPTION_DOCKERFILE} if it
	                           already exists.
	  -d | --detect-shell      Outputs the shell available in the image.
	                           Shells tested: ${OPTION_SHELL_TEST}
	EOT
}

# Usage: detect_shell_available
# Example: detect_shell_available
#          ash
detect_shell_available()
{
	for shellbin in ${OPTION_SHELL_TEST}
	do
		if inspect_image "${shellbin}"
		then
			echo "${shellbin}"
			return 0
		fi
	done
	return 1
}


# Usage: inspect_image <inspection>
# Example: inspect_image whomai
inspect_image()
{
	inspection="${1}"

	$DOCKER run \
		--rm \
		"${OPTION_IMAGE}" \
		"${inspection}" 2> /dev/null

	return $?
}

# Example: generate_author_info
#          Augusto Pascutti <augusto.hp@gmail.com>
generate_author_info()
{
	if [ -z "$GIT" ]
	then
		return 0
	fi

	name=$($GIT config user.name)
	email=$($GIT config user.email)
	echo "${name} <${email}>"
}

# Usage: main
main()
{
	if [ -z "${OPTION_IMAGE}" ]
	then
		echo "No image specified! Run 'ship --help' for more information." 
		return 1
	fi

	user=$(inspect_image 'whoami')
	if [ "$user" = "root" ]
	then 
		home="/root"
	else
		home="/home/${user}"
	fi

	container_home="${PWD}/${OPTION_CHOME}"
	OPTION_CMD="$(detect_shell_available)"
	case "${OPTION_CMD}" in
		ash)
			history_file=".ash_history"
			;;
		bash)
			history_file=".bash_history"
			;;
		*)
			echo "Error: This image does not have any supported shell!"
			echo "Please, submit an issue to ${PROGRAM_URL}."
			return 2
			;;
	esac

	$DOCKER run \
		--rm \
		--name "ship-generating-dockerfile" \
		-it \
		-e "HISTSIZE=10000" \
		-e 'HISTCONTROL="erasedups:ignoreboth"' \
		-e 'HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"' \
		-v "${container_home}:${home}" \
		-v "${PWD}:/home/developer" \
		"${OPTION_IMAGE}" \
		"${OPTION_CMD}"
	echo

	saved_history_file="${container_home}/${history_file}"
	if [ ! -f "${saved_history_file}" ]
	then
		echo "Error: history file not saved! I am terribly sorry for that."
		echo "Please, create an issue at ${PROGRAM_URL}."
		return 2
	fi

	if [ -n "${OPTION_FORCE_RECREATION}" ]
	then
		rm "${OPTION_DOCKERFILE}"
	fi

	user_info=$(generate_author_info)
	cat <<-EOT > "${OPTION_DOCKERFILE}"
	# Generated by ${PROGRAM_URL}
	FROM ${OPTION_IMAGE}
	LABEL maintainer="${user_info}"

	EOT

	while read -r line
	do
		echo "RUN ${line}" >> "${OPTION_DOCKERFILE}"
	done < "${saved_history_file}"
	echo "${OPTION_DOCKERFILE} writeen successfully!"
}

while :;
do
	if [ $# -eq 0 ]
	then 
		break
	fi

	case "$1" in
		-h|--help|help)
			ENTRYPOINT="display_help"
			;;
		-v|--version|version)
			ENTRYPOINT="display_version"
			;;
		-d|--detect-shell)
			ENTRYPOINT="detect_shell_available"
			;;
		-f|--force)
			OPTION_FORCE_RECREATION=1
			;;
		-o|--out)
			OPTION_DOCKERFILE="$2"
			shift
			;;
		*)
			OPTION_IMAGE=$1
			;;
	esac
	shift
done

$ENTRYPOINT
exit $?

